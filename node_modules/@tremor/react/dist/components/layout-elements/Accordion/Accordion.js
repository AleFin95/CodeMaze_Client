'use client';
import{__rest as e}from"tslib";import t,{createContext as o,useState as r,useContext as l}from"react";import{twMerge as s}from"tailwind-merge";import{border as i,borderRadius as a}from"../../../lib/shape.js";import{colorPalette as d,DEFAULT_COLOR as n}from"../../../lib/theme.js";import{getColorClassNames as m,makeClassName as c}from"../../../lib/utils.js";import"../../../contexts/BaseColorContext.js";import"../../../contexts/HoveredValueContext.js";import p from"../../../contexts/RootStylesContext.js";import"../../../contexts/SelectedValueContext.js";const x=c("Accordion"),f=o({isExpanded:!1,setIsExpanded:void 0}),h=t.forwardRef(((o,c)=>{var h;const{expanded:v=!1,children:j,className:C}=o,E=e(o,["expanded","children","className"]),[b,u]=r(v),g=null!==(h=l(p))&&void 0!==h?h:s(i.sm.all,a.lg.all);return t.createElement("div",Object.assign({ref:c,className:s(x("root"),"overflow-hidden",m(n,d.lightRing).borderColor,m("white").bgColor,g,C)},E),t.Children.map(j,((e,o)=>0===o?t.createElement(f.Provider,{value:{isExpanded:b,setIsExpanded:u}},t.cloneElement(e)):t.createElement("div",{className:b?"":"hidden"},e))))}));h.displayName="Accordion";export{f as ExpandedContext,h as default};
