'use client';
import{__rest as t}from"tslib";import e,{useContext as o}from"react";import{twMerge as r}from"tailwind-merge";import"../../../contexts/BaseColorContext.js";import l from"../../../contexts/HoveredValueContext.js";import"../../../contexts/RootStylesContext.js";import s from"../../../contexts/SelectedValueContext.js";import{BaseColors as a}from"../../../lib/constants.js";import{colorClassNames as n}from"../../../lib/colorClassNames.js";import{borderRadius as i,border as m}from"../../../lib/shape.js";import{spacing as c}from"../../../lib/spacing.js";import{fontSize as u}from"../../../lib/font.js";import{colorPalette as p,DEFAULT_COLOR as x}from"../../../lib/theme.js";import{isValueInArray as d,getColorClassNames as f,makeClassName as g}from"../../../lib/utils.js";const C=g("MultiSelectBoxItem"),b=e.forwardRef(((g,b)=>{const{value:h,text:j,className:k,onClick:B}=g,v=t(g,["value","text","className","onClick"]),{selectedValue:N,handleValueChange:w}=o(s),{hoveredValue:y}=o(l),R=d(h,N),V=y===h,S=R?f(x,p.lightBackground).bgColor:V?f(x,p.canvasBackground).bgColor:f(x,p.canvasBackground).hoverBgColor,E=R?f(x,p.darkestText).textColor:f(x,p.darkText).textColor;return e.createElement("button",Object.assign({ref:b,type:"button",onClick:t=>{null==w||w(h),null==B||B(t)},className:r(C("root"),"flex items-center justify-start w-full",c.twoXl.paddingX,c.md.paddingY,u.sm,f(x,p.lightBackground).hoverBgColor,f(x,p.darkText).textColor,S,E,k)},v),e.createElement("input",{type:"checkbox",className:r(C("checkbox"),"flex-none focus:ring-none focus:outline-none cursor-pointer",f(x,p.lightRing).focusRingColor,n[a.Blue][p.text].textColor,f(x,p.ring).borderColor,c.lg.marginRight,i.sm.all,m.sm.all),checked:R,readOnly:!0}),e.createElement("p",{className:r(C("text"),"text-sm whitespace-nowrap truncate")},null!=j?j:h))}));b.displayName="MultiSelectBoxItem";export{b as default};
