import React from 'react';
import { Card, Table, TableHead, TableRow, TableHeaderCell, TableBody, TableCell, Badge, Text } from '@tremor/react';

const Leaderboard = (props) => {
    function findRank(array, element) {
        for (let i = 0; i < array.length; i++) {
            if (array[i] === element) {
                return i + 1;
            }
        }
        return -1;
    }
    const getBadgeColor = (role) => {
        if (role === 1) {
            return "amber";
        }
        else if (role === 2) {
            return "slate";
        }
        else if (role === 3) {
            return "stone";
        }
        else {
            return "gray";
        }
    };
    return (React.createElement(React.Fragment, null,
        React.createElement(Card, { className: props.className },
            React.createElement(Table, null,
                React.createElement(TableHead, null,
                    React.createElement(TableRow, null,
                        React.createElement(TableHeaderCell, null),
                        React.createElement(TableHeaderCell, null),
                        props.cell1 && (React.createElement(TableHeaderCell, null, props.cell1)),
                        props.cell2 && (React.createElement(TableHeaderCell, null, props.cell2)),
                        props.cell3 && (React.createElement(TableHeaderCell, null, props.cell3)),
                        props.cell4 && (React.createElement(TableHeaderCell, null, props.cell4)),
                        props.cell5 && (React.createElement(TableHeaderCell, null, props.cell5)))),
                React.createElement(TableBody, null, props.items.sort((a, b) => b[props.scoringMetric] - a[props.scoringMetric]).map((item) => (React.createElement(TableRow, { key: item[props.id] },
                    React.createElement(TableCell, null,
                        React.createElement(Badge, { color: getBadgeColor(findRank(props.items.sort((a, b) => b[props.scoringMetric] - a[props.scoringMetric]), item)) }, findRank(props.items.sort((a, b) => b[props.scoringMetric] - a[props.scoringMetric]), item))),
                    React.createElement(TableCell, null,
                        React.createElement(Text, { color: props.theme || 'purple' }, item[props.id])),
                    props.cell1 && (React.createElement(TableCell, null,
                        React.createElement(Text, { color: props.theme || 'purple' }, item[props.cell1]))),
                    props.cell2 && (React.createElement(TableCell, null,
                        React.createElement(Text, { color: props.theme || 'purple' }, item[props.cell2]))),
                    props.cell3 && React.createElement(TableCell, null,
                        React.createElement(Text, { color: props.theme || 'purple' }, item[props.cell3])),
                    props.cell4 && React.createElement(TableCell, null,
                        React.createElement(Text, { color: props.theme || 'purple' }, item[props.cell4])),
                    props.cell5 && (React.createElement(TableCell, null,
                        React.createElement(Text, { color: props.theme || 'purple' }, item[props.cell5])))))))),
            React.createElement("p", { className: "text-center text-gray-500 text-xs" },
                "powered by ",
                React.createElement("a", { className: "underline", href: "https://www.myflywheel.app/", target: 'none' }, "flywheel")))));
};

export { Leaderboard };
//# sourceMappingURL=index.js.map
